From 0407522a955207e20bff98a83f5b4abb7c64d9d7 Mon Sep 17 00:00:00 2001
From: lvhaiyu <lvhaiyu@espressif.com>
Date: Tue, 15 Apr 2025 19:56:20 +0800
Subject: [PATCH] feat(p4): update code

---
 components/sdmmc/sdmmc_cmd.c | 52 +++++++++++++++++++++++++++---------
 1 file changed, 39 insertions(+), 13 deletions(-)

diff --git a/components/sdmmc/sdmmc_cmd.c b/components/sdmmc/sdmmc_cmd.c
index 71f23ec756..ab99bec94a 100644
--- a/components/sdmmc/sdmmc_cmd.c
+++ b/components/sdmmc/sdmmc_cmd.c
@@ -9,6 +9,8 @@
 
 static const char* TAG = "sdmmc_cmd";
 
+static char *s_write_cache_buffer = NULL;
+static size_t s_write_cache_buffer_size = 16384;  // 16KB
 
 esp_err_t sdmmc_send_cmd(sdmmc_card_t* card, sdmmc_command_t* cmd)
 {
@@ -242,7 +244,6 @@ esp_err_t sdmmc_send_cmd_send_cid(sdmmc_card_t *card, sdmmc_cid_t *out_cid)
     return sdmmc_decode_cid(buf, out_cid);
 }
 
-
 esp_err_t sdmmc_send_cmd_set_relative_addr(sdmmc_card_t* card, uint16_t* out_rca)
 {
     assert(out_rca);
@@ -455,31 +456,56 @@ esp_err_t sdmmc_write_sectors(sdmmc_card_t* card, const void* src,
     esp_err_t err = ESP_OK;
     size_t block_size = card->csd.sector_size;
     esp_dma_mem_info_t dma_mem_info;
+
+    // Initialize cache buffer if not initialized yet
+    if (s_write_cache_buffer == NULL) {
+        s_write_cache_buffer = heap_caps_aligned_alloc(64, s_write_cache_buffer_size, MALLOC_CAP_SPIRAM | MALLOC_CAP_DMA);
+        if (s_write_cache_buffer == NULL) {
+            ESP_LOGE(TAG, "%s: not enough mem for cache buffer, err=0x%x", __func__, ESP_ERR_NO_MEM);
+            return ESP_ERR_NO_MEM;
+        }
+    }
+    // Ensure buffer is large enough
+    if (s_write_cache_buffer_size < block_size * block_count) {
+        free(s_write_cache_buffer);
+        s_write_cache_buffer_size = block_size * block_count;
+        s_write_cache_buffer = heap_caps_aligned_alloc(64, s_write_cache_buffer_size, MALLOC_CAP_SPIRAM | MALLOC_CAP_DMA);
+        if (s_write_cache_buffer == NULL) {
+            ESP_LOGE(TAG, "%s: not enough mem for resized cache buffer, err=0x%x", __func__, ESP_ERR_NO_MEM);
+            return ESP_ERR_NO_MEM;
+        }
+    }
+    // Copy source data to cache buffer
+    memcpy(s_write_cache_buffer, src, block_size * block_count);
     card->host.get_dma_info(card->host.slot, &dma_mem_info);
-#ifdef SOC_SDMMC_PSRAM_DMA_CAPABLE
-    dma_mem_info.extra_heap_caps |= MALLOC_CAP_SPIRAM;
-#endif
-    if (esp_dma_is_buffer_alignment_satisfied(src, block_size * block_count, dma_mem_info)
+
+    bool is_aligned = esp_dma_is_buffer_alignment_satisfied(
+        s_write_cache_buffer,
+        block_size * block_count,
+        dma_mem_info
+    );
+    if (is_aligned
         #if !SOC_SDMMC_PSRAM_DMA_CAPABLE
-            && !esp_ptr_external_ram(src)
+            && !esp_ptr_external_ram(s_write_cache_buffer)
         #endif
     ) {
-        err = sdmmc_write_sectors_dma(card, src, start_block, block_count, block_size * block_count);
+        err = sdmmc_write_sectors_dma(card, s_write_cache_buffer, start_block, block_count, block_size * block_count);
     } else {
         // SDMMC peripheral needs DMA-capable buffers. Split the write into
         // separate single block writes, if needed, and allocate a temporary
         // DMA-capable buffer.
         void *tmp_buf = NULL;
         size_t actual_size = 0;
-        // Clear the SPIRAM flag. We don't want to force the allocation into SPIRAM, the allocator
+        // We don't want to force the allocation into SPIRAM, the allocator
         // will decide based on the buffer size and memory availability.
-        dma_mem_info.extra_heap_caps &= ~MALLOC_CAP_SPIRAM;
-        err = esp_dma_capable_malloc(block_size, &dma_mem_info, &tmp_buf, &actual_size);
-        if (err != ESP_OK) {
-            return err;
+        tmp_buf = heap_caps_malloc(block_size, MALLOC_CAP_SPIRAM | MALLOC_CAP_DMA);
+        if (!tmp_buf) {
+            ESP_LOGE(TAG, "%s: not enough mem, err=0x%x", __func__, ESP_ERR_NO_MEM);
+            return ESP_ERR_NO_MEM;
         }
+        actual_size = heap_caps_get_allocated_size(tmp_buf);
 
-        const uint8_t* cur_src = (const uint8_t*) src;
+        const uint8_t* cur_src = (const uint8_t*) s_write_cache_buffer;
         for (size_t i = 0; i < block_count; ++i) {
             memcpy(tmp_buf, cur_src, block_size);
             cur_src += block_size;
-- 
2.34.1

